import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.11.1'
    }
}

apply plugin: 'android'

allprojects {
    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:all"
        options.compilerArgs << "-Xlint:-deprecation"
    }
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)

        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)

        ndk {
            moduleName "libzameJniRenderer"
            cFlags "-Werror"
            ldLibs "log", "GLESv1_CM"
            // abiFilters "armeabi-v7a", "armeabi", "x86"
        }
    }

    if (new File("tools/signing.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("tools/signing.properties")))

        signingConfigs {
            release {
                storeFile file("tools/signing.keystore")
                keyAlias props["keyAlias"]
                storePassword props["storePassword"]
                keyPassword props["keyPassword"]
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFile getDefaultProguardFile("proguard-android.txt")
        }
    }

    flavorDimensions 'package', 'difficulty', 'analytics', 'zeemote', 'rateoffer'

    productFlavors {
        gplaynormal {
            flavorDimension 'package'
            applicationId 'zame.GloomyDungeons.freedemo.game'
            buildConfigField 'String', 'GA_ACCT', '"UA-1782921-31"'
        }

        gplayhardcore {
            flavorDimension 'package'
            applicationId 'org.zamedev.gloomydungeons1hardcore.gplay'
            buildConfigField 'String', 'GA_ACCT', '"UA-1782921-32"'
        }

        fdroidnormal {
            flavorDimension 'package'
            applicationId 'zame.GloomyDungeons.opensource'
        }

        fdroidhardcore {
            flavorDimension 'package'
            applicationId 'org.zamedev.gloomydungeons1hardcore.opensource'
        }

        normal {
            flavorDimension 'difficulty'
        }

        hardcore {
            flavorDimension 'difficulty'
        }

        withoutanalytics {
            flavorDimension 'analytics'
            buildConfigField 'boolean', 'WITH_ANALYTICS', 'false'
            buildConfigField 'String', 'GA_ACCT', '""'
        }

        withanalytics {
            flavorDimension 'analytics'
            buildConfigField 'boolean', 'WITH_ANALYTICS', 'true'
        }

        withoutzeemote {
            flavorDimension 'zeemote'
            buildConfigField 'boolean', 'WITH_ZEEMOTE', 'false'
        }

        withzeemote {
            flavorDimension 'zeemote'
            buildConfigField 'boolean', 'WITH_ZEEMOTE', 'true'
        }

        withoutrateoffer {
            flavorDimension 'rateoffer'
        }

        withrateoffer {
            flavorDimension 'rateoffer'
        }
    }

    applicationVariants.all { variant ->
        variant.mergeResources.doLast {
            filterResources(variant)
        }
    }
}

dependencies {
    withanalyticsCompile fileTree(dir: "src/withanalytics/libs", include: ["*.jar"])
    withzeemoteCompile fileTree(dir: "src/withzeemote/libs", include: ["*.jar"])
}

def filterResources(variant) {
    File resFiltered = file("${buildDir}/intermediates/res-filtered/${variant.dirName}")

    if (resFiltered.exists()) {
        resFiltered.delete()
    }

    copy {
        from(variant.processResources.resDir) {
            ant.properties["project.VERSION_NAME"] = project.VERSION_NAME

            include "**/*.xml"
            filter(ExpandProperties, project: ant.project)
        }

        from(variant.processResources.resDir) {
            exclude "**/*.xml"
        }

        into resFiltered
    }

    file(variant.processResources.resDir).deleteDir()
    resFiltered.renameTo(file(variant.processResources.resDir))
}
